version: '3.8'

services:
  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: urepricer-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c '
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$REDIS_PASSWORD"
        else
          redis-server
        fi
      '
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: urepricer-app-prod
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AMAZON_CLIENT_ID=${AMAZON_CLIENT_ID}
      - AMAZON_CLIENT_SECRET=${AMAZON_CLIENT_SECRET}
      - AMAZON_REFRESH_TOKEN=${AMAZON_REFRESH_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SQS_QUEUE_URL_ANY_OFFER=${SQS_QUEUE_URL_ANY_OFFER}
      - SQS_QUEUE_URL_FEED_PROCESSING=${SQS_QUEUE_URL_FEED_PROCESSING}
      - DESTINATION_ID_US=${DESTINATION_ID_US}
      - DESTINATION_ID_UK=${DESTINATION_ID_UK}
      - DESTINATION_ID_CA=${DESTINATION_ID_CA}
      - DESTINATION_ID_AU=${DESTINATION_ID_AU}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    command: ["gunicorn", "src.main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker (Production)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: urepricer-celery-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - AMAZON_CLIENT_ID=${AMAZON_CLIENT_ID}
      - AMAZON_CLIENT_SECRET=${AMAZON_CLIENT_SECRET}
      - AMAZON_REFRESH_TOKEN=${AMAZON_REFRESH_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SQS_QUEUE_URL_ANY_OFFER=${SQS_QUEUE_URL_ANY_OFFER}
      - SQS_QUEUE_URL_FEED_PROCESSING=${SQS_QUEUE_URL_FEED_PROCESSING}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    command: ["celery", "-A", "src.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Beat Scheduler (Production)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: urepricer-celery-beat-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    command: ["celery", "-A", "src.celery_app", "beat", "--loglevel=info"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # SQS Consumer (Production)
  sqs-consumer:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: urepricer-sqs-consumer-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - AMAZON_CLIENT_ID=${AMAZON_CLIENT_ID}
      - AMAZON_CLIENT_SECRET=${AMAZON_CLIENT_SECRET}
      - AMAZON_REFRESH_TOKEN=${AMAZON_REFRESH_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SQS_QUEUE_URL_ANY_OFFER=${SQS_QUEUE_URL_ANY_OFFER}
      - SQS_QUEUE_URL_FEED_PROCESSING=${SQS_QUEUE_URL_FEED_PROCESSING}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    command: ["python", "-m", "src.services.sqs_consumer"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: urepricer-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl  # SSL certificates
    depends_on:
      - app
    restart: unless-stopped

volumes:
  redis_data_prod:

networks:
  default:
    name: urepricer-prod-network